#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""mkfr - make functional requirement


Copyright (C) 2019 John van Zantvoort

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse
import sys
import os
import re
import subprocess
import textwrap
import logging
import pprint
import textwrap

__author__ = "John van Zantvoort"
__copyright__ = "John van Zantvoort"
__email__ = "john@vanzantvoort.org"
__license__ = "MIT"
__version__ = "1.0.1"


TEMPLATE_BR = """

Business requirements are descriptions of change that are collected from the
stakeholders of a program, project or initiative. They are typically refined by
a business analyst to resolve inconsistencies and issues. The following are
illustrative examples of requirements.

description:

description string

"""

TEMPLATE_FR = """
title:

title string

description:

description string

rationale:

rationale

validation:
"""

class RDF(object):


    def __init__(self, **kwargs):

        self.fields = kwargs.get('fields', ['title', 'description'])

        for keyname in self.fields:
            setattr(self, keyname, kwargs.get(keyname))

        regexp = '^(' + "|".join(self.fields) + ')\:\s*$'
        self.pattern = re.compile(regexp)


    def read(self, filename):
        lines = list()
        retv = dict()
        chapters = ""

        try:
            lines = [l.strip('\n') for l in open(filename).readlines()]
        except:
            pass

        for line in lines:
            match = self.pattern.match(line)

            if match:
                row = dict()
                chapters = match.group(1)
                retv.append(row)
                continue

            tmplist = retv.get(chapters, [])
            tmplist.append(line)
            retv[chapters] = tmplist

        return retv

    def load(self, filename):
        retv = dict()
        data = self.read(filename)

        for chapter, lines in data:
            lines = self.striplist(lines)
            retv[chapter] = self.line2lines(lines)

        return retv

    def striplist(self, lines):
        """remove leading and trailing empty elements from list"""
        try:
            while not lines[-1]:
                lines.pop()
        except IndexError:
            pass

        try:
            while not lines[0]:
                lines.pop(0)
        except IndexError:
            pass
        return lines

    def line2lines(self, lines):
        """fold lines consecutive lines.

        """
        retv = list()
        stack = ""
        for line in lines:
            subline = line.strip()
            if len(subline) == 0:
                retv.append(stack)
                stack = ""
                continue

            # force break on list
            if subline.startswith('* '):
                retv.append(stack)
                stack = ""

            if stack:
                stack += " " + line

            else:
                stack = line

        if stack:
            retv.append(stack)

        return retv

class RDFFR(RDF):

    def __init__(self, **kwargs):
        data = dict()
        for k, v in kwargs.items():
            data[k[ = v
        data['fields'] = data.get('fields', ['title', 'description',
                                             'rationale', 'validation'])
        super(RDFFR, self).__init__(**data)

class Requirements(object):

    def __init__(self):
        self._topdir = None
        self._path = None
        self._editor = "vim"
        self._wrapper = textwrap.TextWrapper(initial_indent="      ", subsequent_indent="      ", width=80)
        self._filedata = dict()
        self._itemtemplate = "%s%03d"
        self._filetemplate = "%s%03d.txt"
        try:
            os.makedirs(self.requirementsdir)
        except:
            pass
        self._template = """title:

title string

description:

description string

rationale:

rationale

validation:
"""

        self._fr_req_pattern = re.compile(r"^(BR|FR|NFR)(\d+)\.txt$")
        self._delim_pattern = re.compile(r"^(title|description|validation|rationale)\:\s*$")

    @property
    def editor(self):
        return self.which(self._editor)

    @property
    def requirementsdir(self):
        return os.path.join(self.topdir, "requirements")

    @property
    def topdir(self):
        if self._topdir:
            return self._topdir

        topleveldata = self.git("rev-parse", "--show-toplevel")
        self._topdir = topleveldata[0]
        return self._topdir

    @property
    def path(self):
        if self._path:
            return self._path
        path = os.environ["PATH"].split(os.pathsep)
        path = [os.path.expanduser(x) for x in path]
        path = [os.path.abspath(x) for x in path]
        path = [x for x in path if os.path.exists(x)]
        self._path = path
        return self._path

    def which(self, executeable):
        for path in self.path:
            executeable_path = os.path.join(path, executeable)
            if os.path.exists(executeable_path):
                if os.access(executeable_path, os.X_OK):
                    return os.path.join(path, executeable)

        return executeable

    def git(self, *args):
        retv = list()
        command = list()
        command.append(self.which('git'))
        [command.append(x) for x in args]

        process = subprocess.Popen(command,
                                   stderr=subprocess.STDOUT,
                                   stdout=subprocess.PIPE
                                   )
        stdoutdata = process.communicate()[0]
        if len(stdoutdata.strip()) > 0:
            for line in stdoutdata.split('\n'):
                line = line.strip('\n')
                logging.info(line)
                retv.append(line)
        returncode = process.returncode

        if returncode != 0:
            raise IOError(retv[0])
        return retv

    @property
    def requirements_items(self):
        retv = list()
        for fpath in os.listdir(self.requirementsdir):
            match = self._fr_req_pattern.match(fpath)
            if match:
                row = dict()
                row['type'] = match.group(1)
                row['number'] = int(match.group(2))
                retv.append(row)
        return retv

    def list_by_type(self, req_type):
        numbers = list()
        for row in self.requirements_items:
            if row['type'] == req_type:
                numbers.append(row['number'])
        return sorted(numbers)

    def item(self, req_type, req_number):
        filename = self._filetemplate % (req_type.upper(), req_number)
        return os.path.join(self.requirementsdir, filename)

    def striplist(self, lines):
        try:
            while not lines[-1]:
                lines.pop()
        except IndexError:
            pass

        try:
            while not lines[0]:
                lines.pop(0)
        except IndexError:
            pass
        return lines

    def read(self, req_type, req_number):
        path = self.item(req_type, req_number)
        retv = dict()
        header = 'undefined'
        for line in open(path).readlines():
            line = line.strip('\n')
            match = self._delim_pattern.match(line)
            if match:
                header = match.group(1)
                continue
            tmplist = retv.get(header, [])
            tmplist.append(line)
            retv[header] = tmplist

        keys = retv.keys()

        for keyn in keys:
            lines = retv[keyn]
            lines = self.striplist(lines)
            if lines:
                retv[keyn] = self.striplist(lines)
            else:
                del retv[keyn]

        retv['type'] = req_type
        retv['number'] = req_number
        retv['id'] = self._itemtemplate % (req_type, req_number)
        title = retv.get('title', [''])[0]
        retv['title'] = title

        return retv

    def newitem(self, req_type, req_number=None):

        if req_number is None:
            numbers = self.list_by_type(req_type)
            count = 1
            while True:
                if count not in numbers:
                    req_number = count
                    break
                count += 1

        path = self.item(req_type, req_number)
        with open(path, "w") as ofh:
            ofh.write(self._template)
        return req_type, req_number

    def edit(self, req_type, req_number):
        path = self.item(req_type, req_number)
        print(" ".join([self.editor, path]))
        subprocess.call([self.editor, path])

    def get_item_summary(self, req_type, req_number, addref=False):
        data = self.read(req_type, req_number)
        if addref:
            return "%(id)s :ref:`%(id)s`" % data
        else:
            return "%(id)s - %(title)s" % data

    def line2lines(self, lines):
        retv = list()
        stack = ""
        for line in lines:
            subline = line.strip()
            if len(subline) == 0:
                retv.append(stack)
                stack = ""
                continue

            if stack:
                stack += " " + line
            else:
                stack = line

        if stack:
            retv.append(stack)

        return retv

    def build_item(self, req_type, req_number):
        retv = str()
        data = self.read(req_type, req_number)

        retv += "\n\n.. _%(id)s:\n\n" % data
        title = data['title']
        retv += title + "\n"
        retv += "-" * len(title)

        paras = list()

        for chap in ['description', 'rationale', 'validation']:
            if chap in data:
                lines = self.line2lines(data[chap])
                lines = ["*%s*: %s" % (chap, lines[0])] + lines[1:]
                stack = ""

                for line in lines:
                    subline = line.strip()
                    if len(subline) == 0:
                        paras.append(stack)
                        stack = ""
                        continue

                    if stack:
                        stack += " " + line
                    else:
                        stack = line

                if stack:
                    paras.append(stack)
                    stack = ""
        retv += "\n\n" + "\n\n".join(paras)

        return retv

    def build_terse_item(self, req_type, req_number):
        retv = str()
        data = self.read(req_type, req_number)
        description = data.get('description', [])
        bid = data.get('id', 'XXXX')
        ii_str = "| %-5s | " % bid
        si_str = "| %-5s | " % " "
        wrapper1 = textwrap.TextWrapper(initial_indent=ii_str, subsequent_indent=si_str, width=78)
        wrapper2 = textwrap.TextWrapper(initial_indent=si_str, subsequent_indent=si_str, width=78)

        description = self.line2lines(description)
        firstline = description.pop(0)

        for line in wrapper1.wrap(firstline):
            retv += "%-78s |\n" % line

        if not description:
            return retv

        for xline in description:
            for line in wrapper2.wrap(xline):
                retv += "%-78s |\n" % line

        return retv

    def get_br(self):
        retv = str()
        req_type = 'BR'
        hline1 = "+" + "-" * 7  + "+" + "-" * 70 + "+\n"
        hline2 = "+" + "=" * 7  + "+" + "=" * 70 + "+\n"
        retv += hline1
        retv += "| %5s | %68s |\n" % ("Id", "Description")
        retv += hline2

        numbers = self.list_by_type(req_type)
        for number in self.list_by_type(req_type):
            retv += self.build_terse_item(req_type, number)
            retv += hline1
        return retv

    def get_fr(self):
        retv = str()
        req_type = 'FR'
        numbers = self.list_by_type(req_type)
        for num in numbers:
            retv += "\n - " + self.get_item_summary(req_type, num, True) + "\n"
        retv += "\n"
        for number in self.list_by_type(req_type):
            retv += self.build_item(req_type, number)
        return retv

    def __call__(self, req_type):
        retv = str()

        if req_type == 'FR':
            return self.get_fr()

        if req_type == 'BR':
            return self.get_br()
        print(req_type)
        return req_type
        numbers = self.list_by_type(req_type)
        for num in numbers:
            retv += "\n - " + self.get_item_summary(req_type, num, True) + "\n"
        retv += "\n"
        for number in self.list_by_type(req_type):
            retv += self.build_item(req_type, number)
        return retv

def parse_args(args):
    """
    Parse command line parameters

    :param args: command line parameters as list of strings
    :return: command line parameters as :obj:`argparse.Namespace`
    """
    retv = dict()
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--version',
        action='version',
        version='mkfr {ver}'.format(ver=__version__))

    parser.add_argument(
            'reqtype', choices=['fr', 'br', 'nfr'])

    parser.add_argument('action', nargs='?', default='list')

    opts = vars(parser.parse_args(args))

    for keyn, keyv in opts.items():
        if keyv is not None:
            retv[keyn] = keyv

    return retv


def main(args):
    args = parse_args(args)
    action = args.get('action')
    reqtype = args.get('reqtype').upper()

    requirements = Requirements()

    if action == 'list':
        print("Items:")
        numbers = requirements.list_by_type(reqtype)
        for num in numbers:
            print(" - " + requirements.get_item_summary(reqtype, num))

    if action == 'add':
        print("action: add")
        _, req_number = requirements.newitem(reqtype)
        print(req_number)
        requirements.edit(reqtype, req_number)

    if action == 'build':
        print(requirements(reqtype))


if __name__ == "__main__":
    main(sys.argv[1:])
