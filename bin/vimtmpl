#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""vimtmpl, output or write a template script file

Copyright (c) 2020 John van Zantvoort
"""
from __future__ import unicode_literals, print_function, division

__author__ = "John van Zantvoort"
__date__ = "21-Jun-2016"

__license__ = "MIT"
__version__ = "1.0.1"

import sys
import os
from time import localtime, strftime
import argparse
import pwd
import subprocess
import re
import ConfigParser as configparser
import logging
import copy

try:
    from jinja2 import Environment, FileSystemLoader
except ImportError:
    print("Failed to import jinja2")

LOGGER = logging.getLogger('vimtmpl')
LOGGER.setLevel(logging.DEBUG)
LOGGER_STDOUT = logging.StreamHandler(sys.stderr)
LOGGER_STDOUT.setFormatter(
    logging.Formatter("line: %(lineno)s %(levelname)s: %(message)s"))
LOGGER.addHandler(LOGGER_STDOUT)

TEMPLATE_DIRS = [os.path.expanduser('~/.tools/templates/local'),
                 os.path.expanduser('~/.tools/templates/default')]

def filter_strftime(timestr, fmt=None):
    return strftime(fmt, timestr)

class Config(object):

    def __init__(self, *args):
        self._vars = dict()
        self._opts = {'write': False, 'edit': False}
        self.configfile = os.path.expanduser('~/.vimtmplrc')
        self.logger = logging.getLogger('vimtmpl')
        self._executable = str()
        arguments = list(args)

        self.executable = arguments.pop(0)
        self.set_defaults()
        self.readconfig()
        self.parse_args(arguments)
        self.handle_scriptpath()

    @property
    def executable(self):
        return self._executable

    @executable.setter
    def executable(self, varn):
        self._executable = re.sub(r'^.*vimtmpl_', '', varn)
        return self._executable

    def set_defaults(self):
        username = pwd.getpwuid(os.getuid()).pw_name
        user = pwd.getpwuid(os.getuid()).pw_gecos
        timestamp = localtime()

        self._vars = {"company": "unknown",
                      "copyright": "user name",
                      "description": None,
                      "license": "MIT",
                      "mailaddress": "unknown@unknown.nl",
                      'mode': 492,
                      'now': timestamp,
                      "scriptpath": None,
                      "username": username,
                      "user": user}
        self._vars["executable"] = self.executable
        return self._vars

    def parse_args(self, args):
        """
        Parse command line parameters

        :param args: command line parameters as list of strings
        :return: command line parameters as :obj:`argparse.Namespace`
        """
        parser = argparse.ArgumentParser()

        parser.add_argument(
            '--version',
            action='version',
            version='$scriptname {ver}'.format(ver=__version__))

        parser.add_argument('-w', '--write', dest='write', action='store_true',
                            help="write the file")

        parser.add_argument('-e', '--edit', dest='edit', action='store_true',
                            help="Edit script after creation")

        parser.add_argument('-d', '--description', dest='description',
                            help="description of the script")

        parser.add_argument('scriptpath', nargs='*')

        opts = parser.parse_args(args)

        if opts.write:
            self._opts['write'] = True

        if opts.edit:
            self._opts['edit'] = True

        if opts.description:
            self._vars['description'] = opts.description

        if opts.scriptpath:
            self._vars['scriptpath'] = " ".join(opts.scriptpath)

    @property
    def write(self):
        return self._opts['write']

    @property
    def edit(self):
        return self._opts['edit']

    def readconfig(self):
        config = configparser.ConfigParser()
        config.read(self.configfile)

        if config.has_section('user'):
            for option in config.options('user'):
                option_val = config.get('user', option)
                self._vars[option] = option_val

        if config.has_section(self.executable):
            for option in config.options(self.executable):
                option_val = config.get(self.executable, option)
                self._vars[option] = option_val

    def handle_scriptpath(self):
        self._vars['scriptname'] = os.path.basename(self._vars['scriptpath'])
        scripttitle = self._vars.get('scriptname', 'notitle')

        # remove extensions from the script path
        self._vars['title'] = re.sub(r"^(.*)\.\w{1,3}$", r"\1", scripttitle)
        title_cols = self._vars['title'].split('.')
        if self.executable == 'pythonclass':
            self._vars['description'] = "Class for {title}".format(**self._vars)
            self._vars['title'] = title_cols[-1].title()
            self._vars['scriptpath'] = title_cols[-1] + ".py"
        else:
            self._vars['title'] = " ".join([x.title() for x in title_cols])

        return self._vars

    @property
    def vars(self):
        return self._vars


class Edit(object):

    def __init__(self, path):
        self.logger = logging.getLogger('vimtmpl')
        self._path = None
        self._editor = "vim"
        self.edit(path)

    @property
    def path(self):
        if self._path:
            return self._path
        path = os.environ["PATH"].split(os.pathsep)
        path = [os.path.expanduser(x) for x in path]
        path = [os.path.abspath(x) for x in path]
        path = [x for x in path if os.path.exists(x)]
        self._path = path
        return self._path

    def which(self, executeable):
        for path in self.path:
            executeable_path = os.path.join(path, executeable)
            if os.path.exists(executeable_path):
                if os.access(executeable_path, os.X_OK):
                    return os.path.join(path, executeable)

        return executeable

    @property
    def editor(self):
        return self.which(self._editor)

    def edit(self, path):
        subprocess.call([self.editor, path])

class VimTmpl(object):

    def __init__(self, **kwargs):
        self.logger = logging.getLogger('vimtmpl')
        self.executable = re.sub(r'^.*vimtmpl_', '', sys.argv[0])
        self.template_name = self.executable + ".j2"
        self.configfile = os.path.expanduser('~/.vimtmplrc')
        self._config = dict()
        self._defaults = dict()

        self._environment = Environment(loader=FileSystemLoader(TEMPLATE_DIRS))
        self._environment.filters["strftime"] = filter_strftime

        # pylint: disable=W0104
        self.defaults
        # pylint: disable=W0104
        self.config

        for keyn, keyv in kwargs.items():
            if keyv:
                self._config[keyn] = keyv

    @property
    def defaults(self):
        if self._defaults:
            return self._defaults
        self._defaults["company"] = "unknown"
        self._defaults["copyright"] = "user name"
        self._defaults["license"] = "MIT"
        self._defaults["mailaddress"] = "unknown@unknown.nl"
        self._defaults["username"] = pwd.getpwuid(os.getuid()).pw_name
        self._defaults["user"] = pwd.getpwuid(os.getuid()).pw_gecos
        self._defaults['date'] = strftime('%d-%b-%Y', localtime())
        self._defaults['cdate'] = strftime('%Y-%m-%d', localtime())
        self._defaults['year'] = strftime('%Y', localtime())
        self._defaults['mode'] = 492

    @property
    def config(self):
        if self._config:
            return self._config

        self._config = copy.deepcopy(self.defaults)

        config = configparser.ConfigParser()
        config.read(self.configfile)

        if config.has_section('user'):
            for option in config.options('user'):
                self._config[option] = config.get('user', option)

        if config.has_section(self.executable):
            for opt in config.options(self.executable):
                self._config[opt] = config.get(self.executable, opt)
        return self._config

    def render(self):
        return self._environment.get_template(self.template_name).render(self._config)

    def write(self):
        filepath = self.config['scriptpath']

        if os.path.exists(filepath):
            errmsg = 'file {0} already exists'.format(filepath)
            raise IOError(17, errmsg)

        with open(filepath, 'w') as ofh:
            ofh.write(self.render())

        os.chmod(filepath, self.config.get('mode'))

    def edit(self):
        self.write()
        Edit(self.config['scriptpath'])

def main(args):
    config = Config(*args)
    vimtmpl = VimTmpl(**config.vars)
    if config.write:
        if config.edit:
            vimtmpl.edit()
        else:
            vimtmpl.write()
    else:
        print(vimtmpl.render())


if __name__ == "__main__":
    main(sys.argv)
